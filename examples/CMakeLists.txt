cmake_minimum_required(VERSION 2.8)
project(ITK_BENCHMARK)

if (NOT DEFINED ITK_BENCHMARK_SUPERBUILD)
  option(ITK_BENCHMARK_SUPERBUILD "" ON)
endif()


if(ITK_BENCHMARK_SUPERBUILD)
  # External Project Build of ITK
  include(ExternalProject)

  set(ITK_BENCHMARK_EXECUTABLE_OUTPUT_PATH  "${CMAKE_BINARY_DIR}/bin")

  if( NOT ITK_DIR)

    set( ITK_SOURCE_DIR ${CMAKE_BINARY_DIR}/ITK-src )
    set( ITK_BUILD_DIR ${CMAKE_BINARY_DIR}/ITK-build CACHE INTERNAL "Path to store itk binaries")
    set(ITK_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/ITK-install CACHE INTERNAL "Path to store itk install")

    ExternalProject_Add(ITK
      GIT_REPOSITORY "git://itk.org/ITK.git"
      GIT_TAG 1d04c03baf78014c154f5e2bb2508faadd7f926a
      UPDATE_COMMAND ""
      DOWNLOAD_DIR ${ITK_SOURCE_DIR}
      SOURCE_DIR ${ITK_SOURCE_DIR}
      BINARY_DIR ${ITK_BUILD_DIR}
      INSTALL_DIR ${ITK_BUILD_DIR}
      CMAKE_GENERATOR ${gen}
      CMAKE_ARGS
        -DCMAKE_RUNTIME_OUTPUT_DIRECTORY:STRING=${ITK_BENCHMARK_EXECUTABLE_OUTPUT_PATH}
        -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
        -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}
        -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER}
        -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}
        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
        -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}
        -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DBUILD_TESTING:BOOL=OFF
        -DBUILD_EXAMPLES:BOOL=OFF
        -DITK_USE_BRAINWEB_DATA:BOOL=ON
      INSTALL_COMMAND ""
      )

    set(ITK_DIR ${ITK_BUILD_DIR})
  endif()

  set( PerformanceBenchmarks_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../" CACHE INTERNAL "Path to PerformanceBenchmarks")

  ExternalProject_Add(PerformanceBenchmarks2
    UPDATE_COMMAND ""
    DOWNLOAD_COMMAND ""
    SOURCE_DIR "${PerformanceBenchmarks_SOURCE_DIR}"
    BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/PerformanceBenchmarks/"
    CMAKE_GENERATOR ${gen}
    CMAKE_ARGS
      -DCMAKE_RUNTIME_OUTPUT_DIRECTORY:STRING=${ITK_BENCHMARK_EXECUTABLE_OUTPUT_PATH}
      -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
      -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}
      -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER}
      -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}
      -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
      -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}
      -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
      -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
      -DITK_DIR:PATH=${ITK_DIR}
      -DITK_BENCHMARK_SUPERBUILD:BOOL=OFF
    INSTALL_COMMAND ""
    DEPENDS
    )


  return()

endif()


find_package(ITK REQUIRED)
include(${ITK_USE_FILE})

set(ITK_TEST_DRIVER itkTestDriver)

if (NOT DEFINED BENCHMARK_ITK_FILTER)
  option(BENCHMARK_ITK_FILTER "Test the performance of ITK Filters." ON)
endif()

if (NOT DEFINED BENCHMARK_ITK_REGESTRATION)
  option(BENCHMARK_ITK_REGESTRATION "Test the performance of ITK Registration." ON)
endif()

if (NOT DEFINED BENCHMARK_ITK_SEGMENTATION)
  option(BENCHMARK_ITK_SEGMENTATION "Test the performance of ITK Segmentation." ON)
endif()

# Add ITK Benchmark for Filtering
if(BENCHMARK_ITK_FILTER)
  add_subdirectory(Filtering)
endif()

# Add ITK Benchmark for Registration
if(BENCHMARK_ITK_REGESTRATION)
  add_subdirectory(Registration)
endif()

# Add ITK Benchmark for Segmentation
if(BENCHMARK_ITK_SEGMENTATION)
  add_subdirectory(Segmentation)
endif()
